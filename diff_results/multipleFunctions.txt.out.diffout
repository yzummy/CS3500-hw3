
___Entering new scope...					___Entering new scope...

TOKEN: IDENT 		 LEXEME: pizza				TOKEN: IDENT 		 LEXEME: pizza
TOKEN: ASSIGN 		 LEXEME: =				TOKEN: ASSIGN 		 LEXEME: =
INDEX ->  epsilon						INDEX ->  epsilon
ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR			ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR
___Adding pizza to symbol table					___Adding pizza to symbol table
TOKEN: FUNCTION 		 LEXEME: function		TOKEN: FUNCTION 		 LEXEME: function

___Entering new scope...					___Entering new scope...

TOKEN: LPAREN 		 LEXEME: (				TOKEN: LPAREN 		 LEXEME: (
TOKEN: IDENT 		 LEXEME: three				TOKEN: IDENT 		 LEXEME: three
TOKEN: COMMA 		 LEXEME: ,				TOKEN: COMMA 		 LEXEME: ,
TOKEN: IDENT 		 LEXEME: two				TOKEN: IDENT 		 LEXEME: two
TOKEN: COMMA 		 LEXEME: ,				TOKEN: COMMA 		 LEXEME: ,
TOKEN: IDENT 		 LEXEME: one				TOKEN: IDENT 		 LEXEME: one
TOKEN: RPAREN 		 LEXEME: )				TOKEN: RPAREN 		 LEXEME: )
PARAMS -> IDENT							PARAMS -> IDENT
___Adding one to symbol table					___Adding one to symbol table
PARAMS -> IDENT, PARAMS						PARAMS -> IDENT, PARAMS
___Adding two to symbol table					___Adding two to symbol table
PARAMS -> IDENT, PARAMS						PARAMS -> IDENT, PARAMS
___Adding three to symbol table					___Adding three to symbol table
PARAM_LIST -> PARAMS						PARAM_LIST -> PARAMS
TOKEN: LBRACE 		 LEXEME: {				TOKEN: LBRACE 		 LEXEME: {
TOKEN: IDENT 		 LEXEME: three				TOKEN: IDENT 		 LEXEME: three
TOKEN: ASSIGN 		 LEXEME: =				TOKEN: ASSIGN 		 LEXEME: =
INDEX ->  epsilon						INDEX ->  epsilon
ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR			ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR
TOKEN: STRCONST 		 LEXEME: "pepperoni"		TOKEN: STRCONST 		 LEXEME: "pepperoni"
CONST -> STRCONST						CONST -> STRCONST
FACTOR -> CONST							FACTOR -> CONST
TOKEN: SEMICOLON 		 LEXEME: ;			TOKEN: SEMICOLON 		 LEXEME: ;
MULT_OP_LIST -> epsilon						MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST					TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon						ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST				SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC				ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR						EXPR -> ARITHLOGIC_EXPR
EXPR -> ASSIGNMENT_EXPR						EXPR -> ASSIGNMENT_EXPR
TOKEN: IDENT 		 LEXEME: pineapple			TOKEN: IDENT 		 LEXEME: pineapple
TOKEN: ASSIGN 		 LEXEME: =				TOKEN: ASSIGN 		 LEXEME: =
INDEX ->  epsilon						INDEX ->  epsilon
ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR			ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR
___Adding pineapple to symbol table				___Adding pineapple to symbol table
TOKEN: FUNCTION 		 LEXEME: function		TOKEN: FUNCTION 		 LEXEME: function

___Entering new scope...					___Entering new scope...

TOKEN: LPAREN 		 LEXEME: (				TOKEN: LPAREN 		 LEXEME: (
TOKEN: IDENT 		 LEXEME: topping			TOKEN: IDENT 		 LEXEME: topping
TOKEN: COMMA 		 LEXEME: ,				TOKEN: COMMA 		 LEXEME: ,
TOKEN: IDENT 		 LEXEME: sauce				TOKEN: IDENT 		 LEXEME: sauce
TOKEN: RPAREN 		 LEXEME: )				TOKEN: RPAREN 		 LEXEME: )
PARAMS -> IDENT							PARAMS -> IDENT
___Adding sauce to symbol table					___Adding sauce to symbol table
PARAMS -> IDENT, PARAMS						PARAMS -> IDENT, PARAMS
___Adding topping to symbol table				___Adding topping to symbol table
PARAM_LIST -> PARAMS						PARAM_LIST -> PARAMS
TOKEN: LBRACE 		 LEXEME: {				TOKEN: LBRACE 		 LEXEME: {
TOKEN: PRINT 		 LEXEME: print				TOKEN: PRINT 		 LEXEME: print
TOKEN: LPAREN 		 LEXEME: (				TOKEN: LPAREN 		 LEXEME: (
TOKEN: IDENT 		 LEXEME: topping			TOKEN: IDENT 		 LEXEME: topping
TOKEN: RPAREN 		 LEXEME: )				TOKEN: RPAREN 		 LEXEME: )
ENTIRE_VAR -> IDENT						ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR						VAR -> ENTIRE_VAR
FACTOR -> VAR							FACTOR -> VAR
MULT_OP_LIST -> epsilon						MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST					TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon						ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST				SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC				ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR						EXPR -> ARITHLOGIC_EXPR
OUTPUT_EXPR -> PRINT ( EXPR )					OUTPUT_EXPR -> PRINT ( EXPR )
EXPR -> OUTPUT_EXPR						EXPR -> OUTPUT_EXPR
TOKEN: SEMICOLON 		 LEXEME: ;			TOKEN: SEMICOLON 		 LEXEME: ;
TOKEN: IDENT 		 LEXEME: sauce				TOKEN: IDENT 		 LEXEME: sauce
TOKEN: ASSIGN 		 LEXEME: =				TOKEN: ASSIGN 		 LEXEME: =
INDEX ->  epsilon						INDEX ->  epsilon
ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR			ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR
TOKEN: IDENT 		 LEXEME: one				TOKEN: IDENT 		 LEXEME: one
TOKEN: MOD 		 LEXEME: %%				TOKEN: MOD 		 LEXEME: %%
ENTIRE_VAR -> IDENT						ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR						VAR -> ENTIRE_VAR
FACTOR -> VAR							FACTOR -> VAR
MULT_OP -> %%							MULT_OP -> %%
TOKEN: IDENT 		 LEXEME: two				TOKEN: IDENT 		 LEXEME: two
TOKEN: RBRACE 		 LEXEME: }				TOKEN: RBRACE 		 LEXEME: }
ENTIRE_VAR -> IDENT						ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR						VAR -> ENTIRE_VAR
FACTOR -> VAR							FACTOR -> VAR
MULT_OP_LIST -> epsilon						MULT_OP_LIST -> epsilon
MULT_OP_LIST -> MULT_OP FACTOR MULT_OP_LIST			MULT_OP_LIST -> MULT_OP FACTOR MULT_OP_LIST
TERM -> FACTOR MULT_OP_LIST					TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon						ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST				SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC				ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR						EXPR -> ARITHLOGIC_EXPR
EXPR -> ASSIGNMENT_EXPR						EXPR -> ASSIGNMENT_EXPR
EXPR_LIST -> epsilon						EXPR_LIST -> epsilon
EXPR_LIST -> ; EXPR EXPR_LIST					EXPR_LIST -> ; EXPR EXPR_LIST
COMPOUND_EXPR -> { EXPR EXPR_LIST }				COMPOUND_EXPR -> { EXPR EXPR_LIST }
FUNCTION_DEF -> FUNCTION ( PARAM_LIST ) COMPOUND_EXPR		FUNCTION_DEF -> FUNCTION ( PARAM_LIST ) COMPOUND_EXPR

___Exiting scope...						___Exiting scope...

EXPR -> FUNCTION_DEF						EXPR -> FUNCTION_DEF
EXPR -> ASSIGNMENT_EXPR						EXPR -> ASSIGNMENT_EXPR
TOKEN: RBRACE 		 LEXEME: }				TOKEN: RBRACE 		 LEXEME: }
EXPR_LIST -> epsilon						EXPR_LIST -> epsilon
EXPR_LIST -> ; EXPR EXPR_LIST					EXPR_LIST -> ; EXPR EXPR_LIST
COMPOUND_EXPR -> { EXPR EXPR_LIST }				COMPOUND_EXPR -> { EXPR EXPR_LIST }
FUNCTION_DEF -> FUNCTION ( PARAM_LIST ) COMPOUND_EXPR		FUNCTION_DEF -> FUNCTION ( PARAM_LIST ) COMPOUND_EXPR

___Exiting scope...						___Exiting scope...

EXPR -> FUNCTION_DEF						EXPR -> FUNCTION_DEF
EXPR -> ASSIGNMENT_EXPR						EXPR -> ASSIGNMENT_EXPR
START -> EXPR							START -> EXPR

___Exiting scope...						___Exiting scope...


---- Completed parsing ----					---- Completed parsing ----

