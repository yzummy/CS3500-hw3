
___Entering new scope...					___Entering new scope...

TOKEN: FOR 		 LEXEME: for				TOKEN: FOR 		 LEXEME: for
TOKEN: LPAREN 		 LEXEME: (				TOKEN: LPAREN 		 LEXEME: (
TOKEN: IDENT 		 LEXEME: x				TOKEN: IDENT 		 LEXEME: x
FOR_EXPR -> FOR ( IDENT IN EXPR ) LOOP_EXPR			FOR_EXPR -> FOR ( IDENT IN EXPR ) LOOP_EXPR
___Adding x to symbol table					___Adding x to symbol table
TOKEN: IN 		 LEXEME: in				TOKEN: IN 		 LEXEME: in
TOKEN: LIST 		 LEXEME: list				TOKEN: LIST 		 LEXEME: list
TOKEN: LPAREN 		 LEXEME: (				TOKEN: LPAREN 		 LEXEME: (
TOKEN: INTCONST 		 LEXEME: 1			TOKEN: INTCONST 		 LEXEME: 1
CONST -> INTCONST						CONST -> INTCONST
TOKEN: COMMA 		 LEXEME: ,				TOKEN: COMMA 		 LEXEME: ,
TOKEN: INTCONST 		 LEXEME: 2			TOKEN: INTCONST 		 LEXEME: 2
CONST -> INTCONST						CONST -> INTCONST
TOKEN: COMMA 		 LEXEME: ,				TOKEN: COMMA 		 LEXEME: ,
TOKEN: INTCONST 		 LEXEME: 3			TOKEN: INTCONST 		 LEXEME: 3
CONST -> INTCONST						CONST -> INTCONST
TOKEN: RPAREN 		 LEXEME: )				TOKEN: RPAREN 		 LEXEME: )
CONST_LIST -> CONST						CONST_LIST -> CONST
CONST_LIST -> CONST, CONST_LIST					CONST_LIST -> CONST, CONST_LIST
CONST_LIST -> CONST, CONST_LIST					CONST_LIST -> CONST, CONST_LIST
LIST_EXPR -> LIST ( CONST_LIST )				LIST_EXPR -> LIST ( CONST_LIST )
EXPR -> LIST_EXPR						EXPR -> LIST_EXPR
TOKEN: RPAREN 		 LEXEME: )				TOKEN: RPAREN 		 LEXEME: )
TOKEN: LBRACE 		 LEXEME: {				TOKEN: LBRACE 		 LEXEME: {
TOKEN: IDENT 		 LEXEME: x				TOKEN: IDENT 		 LEXEME: x
TOKEN: ASSIGN 		 LEXEME: =				TOKEN: ASSIGN 		 LEXEME: =
INDEX ->  epsilon						INDEX ->  epsilon
ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR			ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR
TOKEN: IDENT 		 LEXEME: y				TOKEN: IDENT 		 LEXEME: y
TOKEN: ADD 		 LEXEME: +				TOKEN: ADD 		 LEXEME: +
ENTIRE_VAR -> IDENT						ENTIRE_VAR -> IDENT
Line 2: Undefined identifier					Line 2: Undefined identifier
