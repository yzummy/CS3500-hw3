
___Entering new scope...					___Entering new scope...

TOKEN: LBRACE 		 LEXEME: {				TOKEN: LBRACE 		 LEXEME: {
TOKEN: IDENT 		 LEXEME: banana				TOKEN: IDENT 		 LEXEME: banana
TOKEN: ASSIGN 		 LEXEME: =				TOKEN: ASSIGN 		 LEXEME: =
INDEX ->  epsilon						INDEX ->  epsilon
ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR			ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR
___Adding banana to symbol table				___Adding banana to symbol table
TOKEN: LIST 		 LEXEME: list				TOKEN: LIST 		 LEXEME: list
TOKEN: LPAREN 		 LEXEME: (				TOKEN: LPAREN 		 LEXEME: (
TOKEN: INTCONST 		 LEXEME: 5			TOKEN: INTCONST 		 LEXEME: 5
CONST -> INTCONST						CONST -> INTCONST
TOKEN: COMMA 		 LEXEME: ,				TOKEN: COMMA 		 LEXEME: ,
TOKEN: INTCONST 		 LEXEME: 6			TOKEN: INTCONST 		 LEXEME: 6
CONST -> INTCONST						CONST -> INTCONST
TOKEN: COMMA 		 LEXEME: ,				TOKEN: COMMA 		 LEXEME: ,
TOKEN: INTCONST 		 LEXEME: 7			TOKEN: INTCONST 		 LEXEME: 7
CONST -> INTCONST						CONST -> INTCONST
TOKEN: COMMA 		 LEXEME: ,				TOKEN: COMMA 		 LEXEME: ,
TOKEN: INTCONST 		 LEXEME: 8			TOKEN: INTCONST 		 LEXEME: 8
CONST -> INTCONST						CONST -> INTCONST
TOKEN: RPAREN 		 LEXEME: )				TOKEN: RPAREN 		 LEXEME: )
CONST_LIST -> CONST						CONST_LIST -> CONST
CONST_LIST -> CONST, CONST_LIST					CONST_LIST -> CONST, CONST_LIST
CONST_LIST -> CONST, CONST_LIST					CONST_LIST -> CONST, CONST_LIST
CONST_LIST -> CONST, CONST_LIST					CONST_LIST -> CONST, CONST_LIST
LIST_EXPR -> LIST ( CONST_LIST )				LIST_EXPR -> LIST ( CONST_LIST )
EXPR -> LIST_EXPR						EXPR -> LIST_EXPR
EXPR -> ASSIGNMENT_EXPR						EXPR -> ASSIGNMENT_EXPR
TOKEN: SEMICOLON 		 LEXEME: ;			TOKEN: SEMICOLON 		 LEXEME: ;
TOKEN: IDENT 		 LEXEME: sixth_banana			TOKEN: IDENT 		 LEXEME: sixth_banana
TOKEN: ASSIGN 		 LEXEME: =				TOKEN: ASSIGN 		 LEXEME: =
INDEX ->  epsilon						INDEX ->  epsilon
ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR			ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR
___Adding sixth_banana to symbol table				___Adding sixth_banana to symbol table
TOKEN: IDENT 		 LEXEME: banana				TOKEN: IDENT 		 LEXEME: banana
TOKEN: LBRACKET 		 LEXEME: [			TOKEN: LBRACKET 		 LEXEME: [
TOKEN: LBRACKET 		 LEXEME: [			TOKEN: LBRACKET 		 LEXEME: [
TOKEN: INTCONST 		 LEXEME: 1			TOKEN: INTCONST 		 LEXEME: 1
CONST -> INTCONST						CONST -> INTCONST
FACTOR -> CONST							FACTOR -> CONST
TOKEN: RBRACKET 		 LEXEME: ]			TOKEN: RBRACKET 		 LEXEME: ]
MULT_OP_LIST -> epsilon						MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST					TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon						ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST				SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC				ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR						EXPR -> ARITHLOGIC_EXPR
TOKEN: RBRACKET 		 LEXEME: ]			TOKEN: RBRACKET 		 LEXEME: ]
TOKEN: SEMICOLON 		 LEXEME: ;			TOKEN: SEMICOLON 		 LEXEME: ;
SINGLE_ELEMENT -> IDENT [[ EXPR ]]				SINGLE_ELEMENT -> IDENT [[ EXPR ]]
VAR -> SINGLE_ELEMENT						VAR -> SINGLE_ELEMENT
FACTOR -> VAR							FACTOR -> VAR
MULT_OP_LIST -> epsilon						MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST					TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon						ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST				SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC				ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR						EXPR -> ARITHLOGIC_EXPR
EXPR -> ASSIGNMENT_EXPR						EXPR -> ASSIGNMENT_EXPR
TOKEN: PRINT 		 LEXEME: print				TOKEN: PRINT 		 LEXEME: print
TOKEN: LPAREN 		 LEXEME: (				TOKEN: LPAREN 		 LEXEME: (
TOKEN: IDENT 		 LEXEME: sixth_banana			TOKEN: IDENT 		 LEXEME: sixth_banana
TOKEN: RPAREN 		 LEXEME: )				TOKEN: RPAREN 		 LEXEME: )
ENTIRE_VAR -> IDENT						ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR						VAR -> ENTIRE_VAR
FACTOR -> VAR							FACTOR -> VAR
MULT_OP_LIST -> epsilon						MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST					TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon						ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST				SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC				ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR						EXPR -> ARITHLOGIC_EXPR
OUTPUT_EXPR -> PRINT ( EXPR )					OUTPUT_EXPR -> PRINT ( EXPR )
EXPR -> OUTPUT_EXPR						EXPR -> OUTPUT_EXPR
TOKEN: RBRACE 		 LEXEME: }				TOKEN: RBRACE 		 LEXEME: }
EXPR_LIST -> epsilon						EXPR_LIST -> epsilon
EXPR_LIST -> ; EXPR EXPR_LIST					EXPR_LIST -> ; EXPR EXPR_LIST
EXPR_LIST -> ; EXPR EXPR_LIST					EXPR_LIST -> ; EXPR EXPR_LIST
COMPOUND_EXPR -> { EXPR EXPR_LIST }				COMPOUND_EXPR -> { EXPR EXPR_LIST }
EXPR -> COMPOUND_EXPR						EXPR -> COMPOUND_EXPR
START -> EXPR							START -> EXPR

___Exiting scope...						___Exiting scope...


---- Completed parsing ----					---- Completed parsing ----

