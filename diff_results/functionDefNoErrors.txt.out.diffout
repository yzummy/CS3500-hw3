
___Entering new scope...					___Entering new scope...

TOKEN: IDENT 		 LEXEME: teal				TOKEN: IDENT 		 LEXEME: teal
TOKEN: ASSIGN 		 LEXEME: =				TOKEN: ASSIGN 		 LEXEME: =
INDEX ->  epsilon						INDEX ->  epsilon
ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR			ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR
___Adding teal to symbol table					___Adding teal to symbol table
TOKEN: FUNCTION 		 LEXEME: function		TOKEN: FUNCTION 		 LEXEME: function

___Entering new scope...					___Entering new scope...

TOKEN: LPAREN 		 LEXEME: (				TOKEN: LPAREN 		 LEXEME: (
TOKEN: IDENT 		 LEXEME: start				TOKEN: IDENT 		 LEXEME: start
TOKEN: COMMA 		 LEXEME: ,				TOKEN: COMMA 		 LEXEME: ,
TOKEN: IDENT 		 LEXEME: middle				TOKEN: IDENT 		 LEXEME: middle
TOKEN: COMMA 		 LEXEME: ,				TOKEN: COMMA 		 LEXEME: ,
TOKEN: IDENT 		 LEXEME: end				TOKEN: IDENT 		 LEXEME: end
TOKEN: RPAREN 		 LEXEME: )				TOKEN: RPAREN 		 LEXEME: )
PARAMS -> IDENT							PARAMS -> IDENT
___Adding end to symbol table					___Adding end to symbol table
PARAMS -> IDENT, PARAMS						PARAMS -> IDENT, PARAMS
___Adding middle to symbol table				___Adding middle to symbol table
PARAMS -> IDENT, PARAMS						PARAMS -> IDENT, PARAMS
___Adding start to symbol table					___Adding start to symbol table
PARAM_LIST -> PARAMS						PARAM_LIST -> PARAMS
TOKEN: LBRACE 		 LEXEME: {				TOKEN: LBRACE 		 LEXEME: {
TOKEN: IDENT 		 LEXEME: start				TOKEN: IDENT 		 LEXEME: start
TOKEN: ASSIGN 		 LEXEME: =				TOKEN: ASSIGN 		 LEXEME: =
INDEX ->  epsilon						INDEX ->  epsilon
ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR			ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR
TOKEN: IDENT 		 LEXEME: middle				TOKEN: IDENT 		 LEXEME: middle
TOKEN: SEMICOLON 		 LEXEME: ;			TOKEN: SEMICOLON 		 LEXEME: ;
ENTIRE_VAR -> IDENT						ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR						VAR -> ENTIRE_VAR
FACTOR -> VAR							FACTOR -> VAR
MULT_OP_LIST -> epsilon						MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST					TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon						ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST				SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC				ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR						EXPR -> ARITHLOGIC_EXPR
EXPR -> ASSIGNMENT_EXPR						EXPR -> ASSIGNMENT_EXPR
TOKEN: IDENT 		 LEXEME: middle				TOKEN: IDENT 		 LEXEME: middle
TOKEN: ASSIGN 		 LEXEME: =				TOKEN: ASSIGN 		 LEXEME: =
INDEX ->  epsilon						INDEX ->  epsilon
ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR			ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR
TOKEN: IDENT 		 LEXEME: end				TOKEN: IDENT 		 LEXEME: end
TOKEN: SEMICOLON 		 LEXEME: ;			TOKEN: SEMICOLON 		 LEXEME: ;
ENTIRE_VAR -> IDENT						ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR						VAR -> ENTIRE_VAR
FACTOR -> VAR							FACTOR -> VAR
MULT_OP_LIST -> epsilon						MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST					TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon						ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST				SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC				ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR						EXPR -> ARITHLOGIC_EXPR
EXPR -> ASSIGNMENT_EXPR						EXPR -> ASSIGNMENT_EXPR
TOKEN: IDENT 		 LEXEME: end				TOKEN: IDENT 		 LEXEME: end
TOKEN: ASSIGN 		 LEXEME: =				TOKEN: ASSIGN 		 LEXEME: =
INDEX ->  epsilon						INDEX ->  epsilon
ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR			ASSIGNMENT_EXPR -> IDENT INDEX ASSIGN EXPR
TOKEN: INTCONST 		 LEXEME: 7			TOKEN: INTCONST 		 LEXEME: 7
CONST -> INTCONST						CONST -> INTCONST
FACTOR -> CONST							FACTOR -> CONST
TOKEN: SEMICOLON 		 LEXEME: ;			TOKEN: SEMICOLON 		 LEXEME: ;
MULT_OP_LIST -> epsilon						MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST					TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon						ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST				SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC				ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR						EXPR -> ARITHLOGIC_EXPR
EXPR -> ASSIGNMENT_EXPR						EXPR -> ASSIGNMENT_EXPR
TOKEN: IF 		 LEXEME: if				TOKEN: IF 		 LEXEME: if
TOKEN: LPAREN 		 LEXEME: (				TOKEN: LPAREN 		 LEXEME: (
TOKEN: INTCONST 		 LEXEME: 17			TOKEN: INTCONST 		 LEXEME: 17
CONST -> INTCONST						CONST -> INTCONST
FACTOR -> CONST							FACTOR -> CONST
TOKEN: SUB 		 LEXEME: -				TOKEN: SUB 		 LEXEME: -
MULT_OP_LIST -> epsilon						MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST					TERM -> FACTOR MULT_OP_LIST
ADD_OP -> -							ADD_OP -> -
TOKEN: IDENT 		 LEXEME: start				TOKEN: IDENT 		 LEXEME: start
TOKEN: GT 		 LEXEME: >				TOKEN: GT 		 LEXEME: >
ENTIRE_VAR -> IDENT						ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR						VAR -> ENTIRE_VAR
FACTOR -> VAR							FACTOR -> VAR
MULT_OP_LIST -> epsilon						MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST					TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon						ADD_OP_LIST -> epsilon
ADD_OP_LIST -> ADD_OP TERM ADD_OP_LIST				ADD_OP_LIST -> ADD_OP TERM ADD_OP_LIST
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST				SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
REL_OP -> >							REL_OP -> >
TOKEN: INTCONST 		 LEXEME: 0			TOKEN: INTCONST 		 LEXEME: 0
CONST -> INTCONST						CONST -> INTCONST
FACTOR -> CONST							FACTOR -> CONST
TOKEN: RPAREN 		 LEXEME: )				TOKEN: RPAREN 		 LEXEME: )
MULT_OP_LIST -> epsilon						MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST					TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon						ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST				SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC REL_OP SIMPLE_ARITHLOGIC	ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC REL_OP SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR						EXPR -> ARITHLOGIC_EXPR
TOKEN: LBRACE 		 LEXEME: {				TOKEN: LBRACE 		 LEXEME: {
TOKEN: FOR 		 LEXEME: for				TOKEN: FOR 		 LEXEME: for
TOKEN: LPAREN 		 LEXEME: (				TOKEN: LPAREN 		 LEXEME: (
TOKEN: IDENT 		 LEXEME: end				TOKEN: IDENT 		 LEXEME: end
FOR_EXPR -> FOR ( IDENT IN EXPR ) LOOP_EXPR			FOR_EXPR -> FOR ( IDENT IN EXPR ) LOOP_EXPR
TOKEN: IN 		 LEXEME: in				TOKEN: IN 		 LEXEME: in
TOKEN: LIST 		 LEXEME: list				TOKEN: LIST 		 LEXEME: list
TOKEN: LPAREN 		 LEXEME: (				TOKEN: LPAREN 		 LEXEME: (
TOKEN: INTCONST 		 LEXEME: 1			TOKEN: INTCONST 		 LEXEME: 1
CONST -> INTCONST						CONST -> INTCONST
TOKEN: COMMA 		 LEXEME: ,				TOKEN: COMMA 		 LEXEME: ,
TOKEN: INTCONST 		 LEXEME: 2			TOKEN: INTCONST 		 LEXEME: 2
CONST -> INTCONST						CONST -> INTCONST
TOKEN: COMMA 		 LEXEME: ,				TOKEN: COMMA 		 LEXEME: ,
TOKEN: INTCONST 		 LEXEME: 3			TOKEN: INTCONST 		 LEXEME: 3
CONST -> INTCONST						CONST -> INTCONST
TOKEN: RPAREN 		 LEXEME: )				TOKEN: RPAREN 		 LEXEME: )
CONST_LIST -> CONST						CONST_LIST -> CONST
CONST_LIST -> CONST, CONST_LIST					CONST_LIST -> CONST, CONST_LIST
CONST_LIST -> CONST, CONST_LIST					CONST_LIST -> CONST, CONST_LIST
LIST_EXPR -> LIST ( CONST_LIST )				LIST_EXPR -> LIST ( CONST_LIST )
EXPR -> LIST_EXPR						EXPR -> LIST_EXPR
TOKEN: RPAREN 		 LEXEME: )				TOKEN: RPAREN 		 LEXEME: )
TOKEN: LBRACE 		 LEXEME: {				TOKEN: LBRACE 		 LEXEME: {
TOKEN: PRINT 		 LEXEME: print				TOKEN: PRINT 		 LEXEME: print
TOKEN: LPAREN 		 LEXEME: (				TOKEN: LPAREN 		 LEXEME: (
TOKEN: IDENT 		 LEXEME: middle				TOKEN: IDENT 		 LEXEME: middle
TOKEN: RPAREN 		 LEXEME: )				TOKEN: RPAREN 		 LEXEME: )
ENTIRE_VAR -> IDENT						ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR						VAR -> ENTIRE_VAR
FACTOR -> VAR							FACTOR -> VAR
MULT_OP_LIST -> epsilon						MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST					TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon						ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST				SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC				ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR						EXPR -> ARITHLOGIC_EXPR
OUTPUT_EXPR -> PRINT ( EXPR )					OUTPUT_EXPR -> PRINT ( EXPR )
EXPR -> OUTPUT_EXPR						EXPR -> OUTPUT_EXPR
TOKEN: RBRACE 		 LEXEME: }				TOKEN: RBRACE 		 LEXEME: }
EXPR_LIST -> epsilon						EXPR_LIST -> epsilon
COMPOUND_EXPR -> { EXPR EXPR_LIST }				COMPOUND_EXPR -> { EXPR EXPR_LIST }
EXPR -> COMPOUND_EXPR						EXPR -> COMPOUND_EXPR
LOOP_EXPR -> EXPR						LOOP_EXPR -> EXPR
EXPR -> FOR_EXPR						EXPR -> FOR_EXPR
TOKEN: RBRACE 		 LEXEME: }				TOKEN: RBRACE 		 LEXEME: }
EXPR_LIST -> epsilon						EXPR_LIST -> epsilon
COMPOUND_EXPR -> { EXPR EXPR_LIST }				COMPOUND_EXPR -> { EXPR EXPR_LIST }
EXPR -> COMPOUND_EXPR						EXPR -> COMPOUND_EXPR
TOKEN: ELSE 		 LEXEME: else				TOKEN: ELSE 		 LEXEME: else
TOKEN: LBRACE 		 LEXEME: {				TOKEN: LBRACE 		 LEXEME: {
TOKEN: PRINT 		 LEXEME: print				TOKEN: PRINT 		 LEXEME: print
TOKEN: LPAREN 		 LEXEME: (				TOKEN: LPAREN 		 LEXEME: (
TOKEN: IDENT 		 LEXEME: start				TOKEN: IDENT 		 LEXEME: start
TOKEN: RPAREN 		 LEXEME: )				TOKEN: RPAREN 		 LEXEME: )
ENTIRE_VAR -> IDENT						ENTIRE_VAR -> IDENT
VAR -> ENTIRE_VAR						VAR -> ENTIRE_VAR
FACTOR -> VAR							FACTOR -> VAR
MULT_OP_LIST -> epsilon						MULT_OP_LIST -> epsilon
TERM -> FACTOR MULT_OP_LIST					TERM -> FACTOR MULT_OP_LIST
ADD_OP_LIST -> epsilon						ADD_OP_LIST -> epsilon
SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST				SIMPLE_ARITHLOGIC -> TERM ADD_OP_LIST
ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC				ARITHLOGIC_EXPR -> SIMPLE_ARITHLOGIC
EXPR -> ARITHLOGIC_EXPR						EXPR -> ARITHLOGIC_EXPR
OUTPUT_EXPR -> PRINT ( EXPR )					OUTPUT_EXPR -> PRINT ( EXPR )
EXPR -> OUTPUT_EXPR						EXPR -> OUTPUT_EXPR
TOKEN: RBRACE 		 LEXEME: }				TOKEN: RBRACE 		 LEXEME: }
EXPR_LIST -> epsilon						EXPR_LIST -> epsilon
COMPOUND_EXPR -> { EXPR EXPR_LIST }				COMPOUND_EXPR -> { EXPR EXPR_LIST }
EXPR -> COMPOUND_EXPR						EXPR -> COMPOUND_EXPR
IF_EXPR -> IF ( EXPR ) EXPR ELSE EXPR				IF_EXPR -> IF ( EXPR ) EXPR ELSE EXPR
EXPR -> IF_EXPR							EXPR -> IF_EXPR
TOKEN: RBRACE 		 LEXEME: }				TOKEN: RBRACE 		 LEXEME: }
EXPR_LIST -> epsilon						EXPR_LIST -> epsilon
EXPR_LIST -> ; EXPR EXPR_LIST					EXPR_LIST -> ; EXPR EXPR_LIST
EXPR_LIST -> ; EXPR EXPR_LIST					EXPR_LIST -> ; EXPR EXPR_LIST
EXPR_LIST -> ; EXPR EXPR_LIST					EXPR_LIST -> ; EXPR EXPR_LIST
COMPOUND_EXPR -> { EXPR EXPR_LIST }				COMPOUND_EXPR -> { EXPR EXPR_LIST }
FUNCTION_DEF -> FUNCTION ( PARAM_LIST ) COMPOUND_EXPR		FUNCTION_DEF -> FUNCTION ( PARAM_LIST ) COMPOUND_EXPR

___Exiting scope...						___Exiting scope...

EXPR -> FUNCTION_DEF						EXPR -> FUNCTION_DEF
EXPR -> ASSIGNMENT_EXPR						EXPR -> ASSIGNMENT_EXPR
START -> EXPR							START -> EXPR

___Exiting scope...						___Exiting scope...


---- Completed parsing ----					---- Completed parsing ----

